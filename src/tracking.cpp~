// -------------------------------------------------------
// -------------------------------------------------------
// Synthetic Aperture - Particle Tracking Velocimetry Code
// --- Particle Tracking ---
// -------------------------------------------------------
// Author: Abhishek Bajpayee
//         Dept. of Mechanical Engineering
//         Massachusetts Institute of Technology
// -------------------------------------------------------
// -------------------------------------------------------

#include "std_include.h"
#include "refocusing.h"
#include "tracking.h"
#include "typedefs.h"
#include "tools.h"

using namespace std;
using namespace cv;

void pTracking::read_points(string path) {
    
    Point3f point;
    volume vol;

    ifstream file;
    file.open(path.c_str());

    cout<<"\nReading points to track...\n";
    
    int num_frames = 30;

    for (int i=0; i<num_frames; i++) {

        int num_points;
        file>>num_points;

        vol.x1 = 0;
        vol.x2 = 0;
        vol.y1 = 0;
        vol.y2 = 0;
        vol.z1 = 0;
        vol.z2 = 0;

        for (int j=0; j<num_points; j++) {
            
            file>>point.x;
            file>>point.y;
            file>>point.z;

            if (point.x>vol.x2) vol.x2 = point.x;
            if (point.y>vol.y2) vol.y2 = point.y;
            if (point.z>vol.z2) vol.z2 = point.z;
            if (point.x<vol.x1) vol.x1 = point.x;
            if (point.y<vol.y1) vol.y1 = point.y;
            if (point.z<vol.z1) vol.z1 = point.z;

            points_.push_back(point);
        }

        all_points_.push_back(points_);
        vols_.push_back(vol);
        points_.clear();

    }

    cout<<"done!\n";

}

void pTracking::track() {

    int f1, f2;
    f1 = 0;
    f2 = 1;

    double A, B, E, F;
    A = 0.3;
    B = 3.0;
    E = 1.0;
    F = 0.05;

    double r_n, r_s;
    r_n = 20.0;
    r_s = 20.0;

    int n1, n2;
    n1 = all_points_[f1].size();
    n2 = all_points_[f2].size();

    cout<<"Neighbor sets...\n";
    vector< vector<int> > S_r = neighbor_set(f1, f1, r_n);
    vector< vector<int> > S_c = neighbor_set(f1, f2, r_s);

    /*
    ofstream file;
    file.open("../temp/window1.txt");
    for (int i=0; i<x.size(); i++) {
        file<<all_points_[0][x[i]].x<<"\t";
        file<<all_points_[0][x[i]].y<<"\t";
        file<<all_points_[0][x[i]].z<<endl;
    }
    file.close();
    file.open("../temp/window2.txt");
    for (int i=0; i<y.size(); i++) {
        file<<all_points_[1][y[i]].x<<"\t";
        file<<all_points_[1][y[i]].y<<"\t";
        file<<all_points_[1][y[i]].z<<endl;
    }
    file.close();
    */

    Mat_<double> Pij = Mat_<double>::zeros(n1, n2);
    Mat_<double> Pi = Mat_<double>::zeros(n1, 1);

    // Initializing probabilities
    for (int i=0; i<n1; i++) {
        double Mi = double(S_c[i].size());
        for (int j=0; j<n2; j++) {
            Pij(i,j) = 1/(Mi+1);
        }
        Pi(i,0) = 1/(Mi+1);
    }

    cout<<"Relaxation set...\n";
    vector<Point2i> theta = relaxation_set(f1, f2, E, F);

}

vector<Point2i> pTracking::relaxation_set(int frame1, int frame2, double E, double F) {

    vector<Point2i> theta;
    Point3f dij, dkl;

    #pragma omp parallel for
    for (int i=0; i<all_points_[frame1].size(); i++) {
        for (int j=0; j<all_points_[frame2].size(); j++) {
            for (int k=0; k<all_points_[frame1].size(); k++) {
                for (int l=0; l<all_points_[frame2].size(); l++) {
                    dij = Point3f(all_points_[frame1][i].x-all_points_[frame2][j].x, all_points_[frame1][i].y-all_points_[frame2][j].y, all_points_[frame1][i].z-all_points_[frame2][j].z);
                    dkl = Point3f(all_points_[frame1][k].x-all_points_[frame2][l].x, all_points_[frame1][k].y-all_points_[frame2][l].y, all_points_[frame1][k].z-all_points_[frame2][l].z);
                    double dij_mag = dist(all_points_[frame1][i], all_points_[frame2][j]);
                    if (dist(dij, dkl) < (E + F*dij_mag)) theta.push_back(Point2i(k,l));
                    cout<<i<<" "<<j<<" from thread "<<omp_get_thread_num()<<endl;
                }
            }
        }
    }

    return(theta);

}

vector< vector<int> > pTracking::neighbor_set(int frame1, int frame2, double r) {

    vector<int> indices;
    vector< vector<int> > indices_all;

    for (int i=0; i<all_points_[frame1].size(); i++) {
        for (int j=0; j<all_points_[frame2].size(); j++) {
            if (dist(all_points_[frame1][i], all_points_[frame2][j]) < r) indices.push_back(j);
        }
        indices_all.push_back(indices);
        indices.clear();
    }

    return(indices_all);

}

vector<int> pTracking::points_in_region(int frame, Point3f center, double r) {

    vector<int> indices;

    for (int i=0; i<all_points_[frame].size(); i++) {
        if (dist(all_points_[frame][i], center)<=r) indices.push_back(i);
    }

    return(indices);

}
